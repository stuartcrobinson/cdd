=== PROCESSED: 2025-07-03 11:54:40 ===
SUCCESS Block 1: Updated /Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md
SUCCESS Block 2: Updated /Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md
SUCCESS Block 3: Updated /Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md
SUCCESS Block 4: Updated /Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md
SUCCESS Block 5: Updated /Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md
SUCCESS Block 6: Updated /Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md
SUCCESS Block 7: Updated /Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md
===

Looking at the CDD reference guide for LLMs, I'll generate edit instructions to address the gaps I identified. The main improvements needed are: clarifying the workflow, explaining covenant purposes, and making the integration test purpose clearer.

<<<EXPLANATION>>>

Add a critical workflow section that makes the covenant → test → implementation flow explicit. This is fundamental to CDD but currently unclear in the reference.

<<<FILE>>>

/Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md

<<<SEARCH>>>
## Structure
```
<repo>/
<<<REPLACE>>>
## Workflow
1. Write component docs (API.md, ABSTRACT.md, ARCH.md)
2. Write covenants (.cov.md) - behavioral contracts as examples
3. Generate tests from covenants (will fail initially - TDD)
4. Implement code to pass tests
5. Generate integration tests for declared dependencies
6. Never modify generated tests - fix covenants or implementation

## Structure
```
<repo>/
<<<END>>>


<<<EXPLANATION>>>

Clarify that covenants are hand-written behavioral specifications, not generated. This is a critical distinction.

<<<FILE>>>

/Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md

<<<SEARCH>>>
## Covenant Format (Example)
```markdown
<<<REPLACE>>>
## Covenant Format (Example)
**Purpose**: Hand-written behavioral contracts that generate tests
```markdown
<<<END>>>


<<<EXPLANATION>>>

Expand the Key Rules section to include critical workflow rules about the covenant-test-implementation chain and integration test purposes.

<<<FILE>>>

/Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md

<<<SEARCH>>>
## Key Rules
- No transitive dependencies - declare all direct imports
- No circular runtime deps (but docs can be circular)
- Types-only components: no cov/ or test/
- Change covenant → regenerate test → fix implementation
- Each file self-contained for context window
<<<REPLACE>>>
## Key Rules
- No transitive dependencies - declare all direct imports
- No circular runtime deps (but docs can be circular)
- Types-only components: no cov/ or test/
- Covenants are truth - never edit generated tests
- Change covenant → regenerate test → fix implementation
- Integration tests verify dependency contracts at runtime
- Each file self-contained for context window
- Tests must fail first before implementation (TDD)
<<<END>>>


<<<EXPLANATION>>>

Add brief explanation of ARCH.md's purpose since it's mentioned but not explained.

<<<FILE>>>

/Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md

<<<SEARCH>>>
    │   ├── API.md       # Exports & dependencies
    │   ├── ABSTRACT.md  # 60-word purpose + 300-word overview
    │   └── ARCH.md      # Architecture patterns
<<<REPLACE>>>
    │   ├── API.md       # Exports & dependencies
    │   ├── ABSTRACT.md  # 60-word purpose + 300-word overview
    │   └── ARCH.md      # Tech decisions, constraints, patterns
<<<END>>>


<<<EXPLANATION>>>

Clarify the integration test directory structure and purpose more explicitly.

<<<FILE>>>

/Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md

<<<SEARCH>>>
    ├── test-intn/       # Integration tests
    │   └── {dep-path}/  # Slashes → hyphens
<<<REPLACE>>>
    ├── test-intn/       # Verify dependencies exist at runtime
    │   └── {dep-path}/  # Full path, slashes → hyphens
<<<END>>>


<<<EXPLANATION>>>

Remove the potentially confusing TypeScript configuration note and add a clearer explanation in Common Patterns.

<<<FILE>>>

/Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md

<<<SEARCH>>>
- Example nested: `proj/comp/{parent}/comp/{child}`
- Test-intn naming: `proj-comp-payment` (slashes→hyphens)
- Note: TypeScript imports configured separately
<<<REPLACE>>>
- Example nested: `proj/comp/{parent}/comp/{child}`
- Test-intn naming: `proj-comp-payment` (slashes→hyphens)
<<<END>>>


<<<EXPLANATION>>>

Add a note about TypeScript configuration in Common Patterns where it's more contextually appropriate.

<<<FILE>>>

/Users/stuart/repos/cdd/cdd2/cdd_abridged_ref_card_for_llms.md

<<<SEARCH>>>
## Common Patterns
- Sibling import: `proj/comp/{sibling}: [function]`
- Parent import: `proj/comp/{parent}: [function]`
- Nested import: `proj/comp/{parent}/comp/{child}: [function]`
- Type-only component: Set `Component Type: types-only`
<<<REPLACE>>>
## Common Patterns
- Sibling import: `proj/comp/{sibling}: [function]`
- Parent import: `proj/comp/{parent}: [function]`
- Nested import: `proj/comp/{parent}/comp/{child}: [function]`
- Type-only component: Set `Component Type: types-only`
- Note: TS imports use relative paths configured via tsconfig
<<<END>>>